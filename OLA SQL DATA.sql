CREATE DATABASE OLA;
USE OLA;

#1. Retrieve all successful bookings:
CREATE VIEW SUCCESSFUL_BOOKINGS AS
SELECT * FROM BOOKINGS WHERE BOOKING_STATUS="SUCCESS";

SELECT * FROM SUCCESSFUL_BOOKINGS;

#2. Find the average ride distance for each vehicle type:
CREATE VIEW ride_distance_for_each_vehicle AS
SELECT VEHICLE_TYPE, AVG(RIDE_DISTANCE)
AS AVG_DISTANCE FROM BOOKINGS
GROUP BY VEHICLE_TYPE;

SELECT * FROM ride_distance_for_each_vehicle;

#3. Get the total number of cancelled rides by customers:
CREATE VIEW total_number_of_cancelled_rides_BY_CUSTOMERS AS
SELECT COUNT(*) FROM BOOKINGS WHERE BOOKING_STATUS="CANCELED BY CUSTOMER";

SELECT * FROM total_number_of_cancelled_rides_BY_CUSTOMERS;

#4. List the top 5 customers who booked the highest number of rides:
CREATE VIEW TOP_5_CUSTOMERS AS
SELECT CUSTOMER_ID, COUNT(BOOKING_ID) AS TOTAL_RIDES
FROM BOOKINGS
GROUP BY CUSTOMER_ID
ORDER BY TOTAL_RIDES DESC LIMIT 5;

SELECT * FROM TOP_5_CUSTOMERS;

#5. Get the number of rides cancelled by drivers due to personal and car-related issues:
CREATE VIEW CANCELED_BY_DRIVERS_P_C_ISSUES AS
SELECT COUNT(*) FROM BOOKINGS WHERE CANCELED_RIDES_BY_DRIVER="PERSONAL & CAR RELATED ISSUE";

SELECT * FROM CANCELED_BY_DRIVERS_P_C_ISSUES;

#6. Find the maximum and minimum driver ratings for Prime Sedan bookings:
CREATE VIEW MAX_AND_MIN_DRIVER_RATING AS
SELECT MAX(DRIVER_RATINGS) AS MAX_RATING,
MIN(DRIVER_RATINGS) AS MIN_RATING
FROM BOOKINGS 
WHERE VEHICLE_TYPE="PRIME SEDAN";

SELECT * FROM MAX_AND_MIN_DRIVER_RATING;

#7. Retrieve all rides where payment was made using UPI:
CREATE VIEW UPI_PAYMENT AS
SELECT * FROM BOOKINGS WHERE PAYMENT_METHOD='UPI';

SELECT * FROM UPI_PAYMENT;

#8. Find the average customer rating per vehicle type:
CREATE VIEW AVG_CUSTOMER_RATING AS
SELECT VEHICLE_TYPE ,AVG(CUSTOMER_RATING) AS AVG_CUSTOMER_RATING
FROM BOOKINGS
GROUP BY VEHICLE_TYPE;

SELECT * FROM AVG_CUSTOMER_RATING;

#9. Calculate the total booking value of rides completed successfully:
CREATE VIEW TOTAL_SUCCESSFUL_RIDE_VALUE AS
SELECT SUM(BOOKING_VALUE) AS TOTAL_SUCCESSFUL_RIDE_VALUE
FROM BOOKINGS
WHERE BOOKING_STATUS='SUCCESS';

SELECT * FROM TOTAL_SUCCESSFUL_RIDE_VALUE;

#10. List all incomplete rides along with the reason:
CREATE VIEW INCOMPLETE_RIDES_REASON  AS
SELECT BOOKING_ID, INCOMPLETE_RIDES_REASON 
FROM BOOKINGS
WHERE INCOMPLETE_RIDES='YES';

SELECT * FROM INCOMPLETE_RIDES_REASON;


